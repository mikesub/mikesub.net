{
 "version": "https://jsonfeed.org/version/1",
 "title": "Mike Saburenkov",
 "home_page_url": "http://mikesub.net/blog/",
 "feed_url": "http://mikesub.net/blog/feed.json",
 "items": [
  {
   "title": "TypeScript. Bad Parts",
   "id": "http://mikesub.net/blog/ts_bad_parts.html",
   "url": "http://mikesub.net/blog/ts_bad_parts.html",
   "content_html": "<p>I&#39;ve been writing TypeScript for more than a year now and gone through well-known five stages of grief so it&#39;s time to share my experience. It all started as a compilation of tips &amp; tricks I&#39;ve discovered so far. Then it went to a more meta level of what types bring to JS at all. And as I was writing two pieces asynchronously I began to find myself noticing ‘bad’ parts here and there. At some point, there were enough of them for a separate discussion. So to keep those original ideas free of them, here they are, unordered.</p>\n<h2 id=\"slowness\">Slowness</h2>\n<p>Everything is pointing out it could be considerably faster. I should admit it&#39;s slow but stable so if authors had to choose between those, they did the right choice, but hey, it&#39;s v3 already, maybe it&#39;s time to address that.</p>\n<h2 id=\"cryptic-error-messages\">Cryptic error messages</h2>\n<p>They are. When you rely much on type inferring, it&#39;s even worse. Basically, they are generic stack traces which most of the times I see in a hint window in VSCode. They&#39;re not alone, some other languages are also known for it, but that&#39;s not an excuse.</p>\n<h2 id=\"types-vs-interfaces\">Types vs. interfaces</h2>\n<p>As of TS v3, I don&#39;t see any difference in them, practically speaking. Yes, interfaces can be extended and merged but differences are so subtle so it adds more confusion in the current state of things than benefits.</p>\n<h2 id=\"const-enums\">Const enums</h2>\n<p>If you prepend enum declaration with <code>const</code> the compiler inlines it without creating an object. I can&#39;t see why I have to make that choice, the compiler has all the knowledge (actually even more than me) to decide whether it makes sense or not.</p>\n<h2 id=\"index-signatures\">Index signatures</h2>\n<p>In JS you can put anything as a key in object and it will be converted to a string. TS decided to improve that a bit and allows <code>{ [key: number]: boolean }</code>. Basically, it points that even though key is to be coerced to a string, let&#39;s check that we pass only numbers here. But then we get these:</p>\n<pre><code class=\"lang-typescript\">type A = { [k: number]: any };\nconst a2: A = {2: true}; // alright\nconst a1: A = {&#39;string&#39;: true}; // error, fine\nconst a3: A = {&#39;2&#39;: true}; // no error?\n\ntype B = { [k: string]: any };\nconst b1: B = {&#39;string&#39;: true}; // alright\nconst b3: B = {&#39;2&#39;: true}; // no error, fine\nconst b2: B = {2: true}; // no error?\n</code></pre>\n<p>And <code>Object.keys()</code> is not a generic, because it can&#39;t be as it always returns strings. The coercion was irreversible, nobody can convert strings back to original types for you. You&#39;re alone.</p>\n<pre><code class=\"lang-typescript\">Object.keys() // {} =&gt; string[]\n</code></pre>\n<p>And the last, not the least, is that you can only use primitives there, not your own types:</p>\n<pre><code class=\"lang-typescript\">type Id = number;\ntype Item = {id: Id};\ntype Index = { [k: Id]: Item}; // nope, number please\n</code></pre>\n<h2 id=\"type-inference\">Type Inference</h2>\n<p>That&#39;s nice. You feel good when you can drop obvious cases. It feels like language has done its homework. But then it starts taking defaults when there are multiple options and now you should be aware of them.</p>\n<pre><code class=\"lang-typescript\">const x = [2, true];\n// (number | boolean)[], not [number, boolean]\n</code></pre>\n<p>And when you return different shapes of objects from a function (say, redux reducer), inference creates monsters.</p>\n<pre><code class=\"lang-typescript\">function foo(x: boolean, arr: []) {\n    if (x) {\n        return {&#39;a&#39;: true, &#39;3&#39;: 2}\n    } else {\n        return {&#39;b&#39;: 2, 3: arr.length};\n    }\n}\n// Inferred: {&#39;a&#39;: boolean; &#39;3&#39;: number; &#39;b&#39;?: undefined;}\n//           | {&#39;bar&#39;: number; 3: 0; &#39;a&#39;?: undefined}\n//\n// Meant to be: {a?: boolean; &#39;3&#39;: number; b?: number;}\n</code></pre>\n<p> Possible solution might be to add strict check similar to disabling implicit ‘any’ to avoid this monsters guessing and fail to infer when it is ambigious.</p>\n<h2 id=\"global-scope\">Global scope</h2>\n<p>If you write TS for a browser, thus adding <code>dom</code> in <code>compilerOptions/lib</code>, lots of useful types become available in the global scope. And you don&#39;t need to import them explicitly. You know what it means. And they aren&#39;t grouped into a namespace. Yup.\nSome are easy to expect as <code>XMLHTTPRequest</code> but others have more abstract names: <code>AlignSetting</code>, <code>Transport</code>. You will notice errors if you would try to define them in your code:</p>\n<pre><code class=\"lang-typescript\">type Transport = ...;\n// duplicate identifier, was already declared in dom.d.ts\n</code></pre>\n<p>But you might miss the error if you just forget to define it and thus built-in will be used. And even worse will happen if you clash with built-in interfaces, as they will be merged:</p>\n<pre><code class=\"lang-typescript\">interface Account { foo: &#39;bar&#39; }\nlet x: Account = { foo: &#39;bar&#39; };\n// missing displayName, id, rpDisplayName from type &#39;Account&#39;.\n</code></pre>\n<h2 id=\"official-documentation\">Official documentation</h2>\n<p>It&#39;s lacking behind. TS v3.3 is the latest now. <code>BigInt</code> has been added in v3.2 but official documentation hasn&#39;t been updated.</p>\n<h2 id=\"syntax\">Syntax</h2>\n<p>JS started to feel heavy when they added object destructuring. Then defaults and renaming came. Only type annotations were missing. Oh, it could be nested. I know it can be easily avoided by code style rules but still sometimes I find myself hitting the timeout in trying to parse the function declaration.</p>\n<hr>\n<p>Alright. The path for more positive things looks much clear now. If you have any comments, please reach out to me, I&#39;d love to discuss that in more details. And stay tuned, originally planned articles will follow.</p>\n",
   "date_published": "2019-02-07T23:00:00+01:00"
  },
  {
   "id": "http://mikesub.net/blog/microblog.html",
   "url": "http://mikesub.net/blog/microblog.html",
   "content_html": "<p>a post testing micro.blog integration.</p>\n",
   "date_published": "2018-09-25T21:30:00+01:00"
  },
  {
   "title": "NL#2",
   "id": "http://mikesub.net/blog/nl_drafts.html",
   "url": "http://mikesub.net/blog/nl_drafts.html",
   "content_html": "<p>Прошло полгода после анонса, а я так и не закончил свою первую заметку про Нидерланды. Чтобы как-то сдвинуть дело, начну выкладывать черновики записей: <a href=\"https://t.me/transmith\">https://t.me/transmith</a> Возможно, позже получится из них собрать что-то полноценное.</p>\n",
   "date_published": "2018-02-12T21:59:00+01:00"
  },
  {
   "title": "NL",
   "id": "http://mikesub.net/blog/nl.html",
   "url": "http://mikesub.net/blog/nl.html",
   "content_html": "<p>Стояло жаркое лето середины 90-х и я пытался изо всех сил угнаться за своим братом на велосипеде. Он ехал на «Украине», я на чём-то поменьше. Первые километра четыре шли по довольно спокойной асфальтированной дороге, одной из тех, которая ведет от шоссе к десяткам деревень и дачных посёлков. Оставшийся же путь надо было проделать по пыльной обочине горьковского шоссе. Там, где-то не доезжая Покрова, было что-то придорожное, где можно было купить аэрозоль против насекомых. Он понадобился, чтобы вывести совсем уж наглых размеров осиное гнездо на чердаке дома, где мы летом спали.</p>\n<p>Жару усугубляли резкие порывы горячего пыльного воздуха от фур, проносившихся мимо. Когда мы доехали до заветного грубо сколоченного придорожного ларька, помимо аэрозоли брат купил банку Amsterdam Navigator. Он был крепкий, теплый и пена из банки моментально сделала наши руки отвратительно липкими.</p>\n<hr>\n<p>Спустя лет пятнадцать, пасмурным осенним днём мы купили бутылку виски, поехали в нижнее течении Москвы-реки, и надев резиновые сапоги, зашли постоять в воду и выпить. Так мы тогда оказались в Лыткарино, на другом берегу реки от деревни Андреевское. Там были очистные сооружения, 24 маленькие градирни, бывший колхоз им. Ленина, испытательный комплекс Центрального института авиационного моторостроения и жилой комплекс «Адмиралтейский». Через несколько месяцев со мной на фликре связался дизайнер из Голландии и предложил купить права на фотографию, сделанную в тот день. Я согласился и спустя некоторое время в Голландии вышел какой-то проходной роман с моей будущей женой и её подругой на обложке. Мне прислали несколько экземпляров и тогда я решил при случае выучить голландский, чтобы всё-таки прочитать эту книгу.</p>\n<hr>\n<p>Еще переместимся на шесть лет вперед, и вот я выхожу из аэропорта Скипхол, еду заселяться в номер отеля, на следующий день приезжаю в офис какого-то издательского дома, прохожу интервью и в результате, получив офер, решаю остаться в Москве. В тот же день происходит авиакатастрофа рейса MH17 Амстердам—Куала-Лумпур в Донецкой области.</p>\n<hr>\n<p>Еще вперед на три года и вот я уже не обращаю внимания на дождь, если это не ливень, у меня уже украли один велосипед и, кажется, я готов рассказать про вотсап-дружины, про фризский язык, про особенности банковской системы, про то, что почти невозможно возить велосипеды в электричках и про то, что имеет смысл дарить уезжающим сюда.</p>\n",
   "date_published": "2017-08-31T09:00:00+01:00"
  },
  {
   "title": "10 years a web developer",
   "id": "http://mikesub.net/blog/10_years_a_developer.html",
   "url": "http://mikesub.net/blog/10_years_a_developer.html",
   "content_html": "<p>On December 2006 I joined a digital agency as a humble HTML coder. There was neither Chrome nor iPhone yet, IE market share was around 85%, table-based layouts ruled the internet and we all were debugging using <em>window.alert</em> calls.</p>\n<p>Fast-forward 10 years. Chrome&#39;s released v.54, iPhone is in its 10th generation, IE has less than 15%. Web standards and its support, development tools and other technologies involved improved drastically but same happened to the complexity of products being developed nowadays. And it seems that these things are evolving nearly at the same rate. There is more or less same gap there, dev.tools can&#39;t keep up with things for which we use them. Be frank, it&#39;s still a pain in the neck to develop front-end stuff. We&#39;ve conquered basic blocks, but interfaces are getting more sophisticated, the web is being accessed from more devices, etc.</p>\n<p>And I can&#39;t name anything that would change this.</p>\n",
   "date_published": "2016-11-24T16:20:00+03:00"
  },
  {
   "title": "Пусть бегут",
   "id": "http://mikesub.net/blog/let_them_run.html",
   "url": "http://mikesub.net/blog/let_them_run.html",
   "content_html": "<p>Ну а если серьёзно про 2015 год, то чаще остального мы вспоминаем момент с одной из пробежек. Мы подбегали к небольшой горке, по которой поднимался мальчик лет 5-6 на \nвелосипеде. Ему было тяжело забираться, но он не сдавался, медленно и методично крутил педали. Тут мы с разбега забегаем на эту горку и начинаем его догонять. В \nкакой-то момент равняемся с ним, а потом начинаем медленно обгонять. Мальчик сначала прибавляет и пытается не дать себя обогнать, всё-таки он же на велосипеде, но \nвскоре сдаётся и произносит как бы про себя, но вслух, в сторону: «Пусть бегут».</p>\n",
   "date_published": "2015-12-31T11:06:00+03:00"
  },
  {
   "title": "about:blank",
   "id": "http://mikesub.net/blog/about_blank.html",
   "url": "http://mikesub.net/blog/about_blank.html",
   "content_html": "<p>Я очень скучаю по чистой вкладке, пустой белой странице. Когда-то все браузеры при открытии вкладки показывали\nчистую страницу и пользователь мог либо ввести адрес в адресную строку, либо выбрать страницу из закладок. Потом интерфейс \nстал обрастать и появился вывод истории недавних посещений, списки популярных сайтов. Гугл начал показывать по сути свою \nстартовую страницу, одно время показывал свои приложения и т.п.</p>\n<p>Одно время это было опционально, но сейчас уже в хроме настроить показ пустой страницы нельзя. Вслед за ним опера и \nяндекс также не дают такую возможность. В сафари и фаерфоксе такая опция осталась, но неизвестно надолго ли.</p>\n<p>Я держу свой рабочий стол (тот, который на компьютере) абсолютно пустым, без обоев, с одноцветной заливкой. Переключаясь\nна него, я попадаю на чистый лист и из спотлайта начинаю новую задачу. Также и в браузере. Если мне операционная система \nвместо пустого десктопа будет выводить какие-нибудь списки недавно открытых файлов, популярных приложений — не знаю \nсмогу ли я к этому привыкнуть, либо придется искать обходные пути отключения этой функциональности.  </p>\n<p>На написание этой заметки меня натолкнул \n<a href=\"http://blog.flickr.net/en/2015/03/18/flickr-tab-in-google-chrome/\">flickr tab</a>, расширение для хрома, которое в каждой новой вкладке показывает \nслучайную популярную фотографию с одноименного сервиса. Я его установил в попытке избежать мусорной стартовой страницы. \nНо в результате поймал себя за тем, что открывая новый вкладку, я автоматически открываю еще одну, так как срабатывает \nрефлекс того, что я очутился не на новой вкладке, а просто переключился на какую-то старую, в которой что-то уже открыто.</p>\n<p>Ну и немного про обои рабочего стола: из-за моих настроек я долго не замечал в yosemite полупрозрачного фона боковых \nпанелей, меню и прочих элементов. Из-за однотонного темносерого фона я просто считал, что всё в новой ОС тускло и \nстранно. Только случайно, поставив каких-то ярких слонов на рабочий стол, я заметил эту полупрозрачность. Слонов я убрал \nи поставил крыжик в system preferences &gt; accessibility &gt; reduce transparency, чего всем и советую.</p>\n",
   "date_published": "2015-03-26T17:45:00+03:00"
  },
  {
   "title": "Гугл мой спотлайт",
   "id": "http://mikesub.net/blog/google_my_spotlight.html",
   "url": "http://mikesub.net/blog/google_my_spotlight.html",
   "content_html": "<p>В продолжение «<a href=\"http://ilyabirman.ru/meanwhile/all/web-or-native-future/\">Будущего нативных и веб-приложений</a>» Ильи Бирмана.</p>\n<p>Да, веб-приложения сейчас часто неудобнее нативных аналогов. На мобильных платформах это еще больше ощущается, чем \nна десктопах. Одновременно с этим то, что открывается по ссылке в браузере, далеко и давно ушло от понятия \nвеб-страницы. Даже простейший блог со статьями, который, казалось бы, наиболее близок к тому, зачем придумали интернет — \nуже не список статей с перекрестными ссылками. Поиск, комментарии, админка — всё это ближе к сервису/приложению нежели \nк странице.</p>\n<p>Но разработчики веб-сервисов с одной стороны и разработчики браузеров с другой до сих расценивают интернет как список \nвеб-страниц. </p>\n<p>Представьте, если бы при запуске нативного приложения, вы бы попадали на лэндинг/промо- страницу с описанием сервиса, а \nне туда, где вы остановили работу в этом приложении. В вебе такое еще можно встретить.</p>\n<p>Представьте, что ваш док приложений — список безликих иконок «программа». В вебе сейчас это так. В Apple пошли \nдальше и убрали даже фавиконки у закладок в Safari.</p>\n<p>Представьте, что каждый раз при запуске приложения вам необходимо было бы вводить логин/пароль. Такое в вебе еще встречается.\nВ идеале вся авторизация в вебе должна остаться в случаях, требующих дополнительной защиты. Также как в нативных \nприложениях 1Password требует дополнительную авторизацию, а почтовый клиент не требует, также и в браузере интернет-банк \nпусть требует.</p>\n<p>А теперь представьте, что вы могли бы себе в док (или из спотлайта) попасть сразу в нужную папку вашего почтового клиента \nили в нужный список reminders в обход разводящего экрана. </p>\n<p>Но мы неизбежно к этому идём и те, кто избавляются от концепции URLов в своих веб-приложениях (привет, интернет-банки),\nкто по умолчанию выставляет режим «не запоминать пароль» — все они идут не в ту сторону.</p>\n",
   "date_published": "2015-03-26T02:15:00+03:00"
  },
  {
   "title": "Верстальщики: от программистов к дизайнерам",
   "id": "http://mikesub.net/blog/html_designers.html",
   "url": "http://mikesub.net/blog/html_designers.html",
   "content_html": "<p>Изначально HTML создавался как markdown или разметка wiki. Как сейчас нет markdown-верстальщика, word-писателя, так и\nизначально не было HTML—верстальщика. Это было еще один формат разметки текста.</p>\n<p>Почти сразу HTML стали использовать не для создания документов с гиперссылками, а чего-угодно с гиперссылками.\nТак появились веб-сайты: интерактивные документы, с одной стороны пытающие предоставить интерфейс по аналогии с GUI\nвсего остального компьютера, с другой стороны предоставить вёрстку в полиграфическом смысле. Технология этого \nне позволяла. С интерактивностью еще куда ни шло, появились веб-формы, а вот с вёрсткой (раскладка, сетки,\nблоки) — с этим были большие проблемы. Но никто ничего знать не хотел и поэтому в ход шли таблицы, распорки в виде\nпрозрачных изображений и т.д. Собственно, из-за этого вся эта сложность, инструментария нет, есть несколько программ\n(браузеров), которые воспринимают инструкции по—разному, а плохие дизайнеры показывают нарисованные макеты в растровом \nграфическом формате и настаивают на своём.</p>\n<p>Поэтому выделились люди, которые могли как-то заставить браузер отрисовывать то, что нарисовал дизайнер. Cо временем, \nтехнологии и инструменты прогрессировали и эволюционировали, и стало возможным верстать предназначенными для этого \nсредствами, а не костылями. Так ушла вёрстка таблицами, но до сих пор нет инструмента, который бы позволил полностью \nправильно сделать то, что вы рисуете. Но, конечно, ситуация гораздо лучше, чем несколько лет назад. Сейчас, если брать \nсовременный браузер, то, в целом, в HTML есть все нужные средства, и он опять превращается в более-менее простой \nинструмент вёрстки. В рамках прототипов/макетов на нем можно писать человеку не сильно вовлеченному во все \nэти технологии.</p>\n<p>Также сейчас с появлением AJAX-подгрузки частей страницы, возможностей анимации, адаптивного подстраивания под разные\nразмеры окна, всё это сложнее и сложнее умещать в плоский PSD-макет. Теперь вместе с макетом идёт документация или \nраскадровка разных состояний. Но когда перед разработчиком плоский макет, то не видно всей логики, которую\nзакладывал проектировщик/дизайнер: это просто два разных цвета, или этот цвет — функция от того цвета (затемнение на\n20%), это 10px или это расстояние зависит от состояния вот того блока, или это какой-нибудь «стандартный отступ при\nтаких-то условиях» и тому подобное.</p>\n<p>То есть информация заложенная дизайнером так или иначе теряется, и приходится сажать рядом дизайнера, чтобы он объяснял\nпо картинке, почему где как, или писать документацию, или дробить разработку на много итераций, постоянно показывая\nрезультат и внося в него изменения.</p>\n<p>И тут начинается самое интересное. Сейчас технология развивается, уже можно делать раскладку без использования неявных\nпобочных эффектов каких-либо свойств, уже можно сохранять зависимости размеров, цветов и прочего используя удобные\nпре- и пост- процессоры, которые довольно по-человечески работают.</p>\n<p>И, возвращаясь к интерактивности, популярного сейчас параллакс-эффекта и т.д., win-win ситуация для проектировщика\nинтерфейса — когда он как минимум на одном языке разговаривает с разработчиком, и как максимум, а технологии уже\nэто позволяют, набрасывает какие-то прототипы, которые верстальщик уже потом доведёт до своих стандартов качества,\nне забудет про всякие сложные моменты и сделает, чтобы это везде работало, как задумано.</p>\n<p>ну и конечно все эти анимации и резиновость - это тоже на статических макетах не опишешь, приходится отдельно\nдокументацию какую-то прикладывать, которая слепая (всяко лучше самому это реализовать и увидеть как это\nна самом деле в браузере будет работать).</p>\n<p>Поэтому веб-вёрстка, изначально зародившаяся как инструмент программиста, после этого выделившись в отдельную\nспециализацию, сейчас плавно и верно перетекает в сторону проектировщиков интерфейсов и это отлично. А верстальщики \nвместе с этим плавно перетекают либо в дизайнеров, либо в программистов и это прекрасно.</p>\n",
   "date_published": "2015-03-22T02:15:00+03:00"
  }
 ]
}